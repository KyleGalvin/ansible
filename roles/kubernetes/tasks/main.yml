
#
#   Update the system. This one is a no-brainer.
#   We want security updates, and the latest packages.
#
- name: Apt update
  become: yes
  apt:
    update_cache: yes

- name: Apt upgrade
  become: yes
  apt:
    upgrade: yes

#
#   Install any general packages not included in the base image we will need.
#
- name: Install utility packages
  become: yes
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

#
#   Operating system level preparations
#   Disable swap. Without this, kubernetes will have stability issues
#   Add iptables kernel module
#
- name: Disable swap
  become: yes
  command: swapoff -a

- name: disable swap in fstab
  become: yes
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Create containerd config file
  become: yes
  file:
    path: "/etc/modules-load.d/containerd.conf"
    state: "touch"

- name: Add conf for containerd
  become: yes
  blockinfile:
    path: "/etc/modules-load.d/containerd.conf"
    block: |
          overlay
          br_netfilter

- name: enable overlay kernel module
  become: yes
  command: modprobe overlay

- name: enable br_netfilter kernel module
  become: yes
  command: modprobe br_netfilter


- name: Set system configurations for Kubernetes networking'
  become: yes
  file:
    path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    state: "touch"

- name: ensure iptables enabled
  become: yes
  ansible.builtin.blockinfile: 
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    block: | 
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-iptables = 1

- name: Apply new settings
  become: yes
  command: sysctl --system

#
#   Install and start containerd packages. No docker included here.
#
- name: Install containerd and its dependecies
  become: yes
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - containerd

- name: create containerd conf directory
  become: yes
  command: mkdir -p /etc/containerd

- name: create containerd conf file
  become: yes
  command: containerd config default | tee /etc/containerd/config.toml
            
- name: reload systemd
  systemd:
    daemon_reload: yes
  become: yes

- name: Start containerd
  systemd:
    name: containerd
    enabled: true

#
#   Install main kubernetes packages from the kubernetes package repository.
#
- name: Add an apt signing key for Kubernetes
  become: yes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adding apt repository for Kubernetes
  become: yes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Install Kubernetes binaries
  become: yes
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - kubelet=1.28.1-00
      - kubeadm=1.28.1-00
      - kubectl=1.28.1-00

- name: Prevent packages from being upgraded
  become: yes
  command: sudo apt-mark hold kubelet kubeadm kubectl

#
#   Prepare and initialize kubernetes. Join the child nodes.
#
- name: Configure node ip
  when: inventory_hostname in groups['testkubemasternodes']
  become: yes
  lineinfile:
    path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    line: KUBELET_EXTRA_ARGS=--node-ip=192.168.1.211
    
- name: Restart kubelet service
  become: yes
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: true
    name: kubelet

- name: Reset any past kubeadm initialization
  become: yes
  command: kubeadm reset --force

- name: Initialize the Kubernetes cluster using kubeadm
  become: yes
  when: inventory_hostname in groups['testkubemasternodes']
  command: kubeadm init --node-name testkube1 --pod-network-cidr=10.244.0.0/16

- name: create root kube directory
  become: yes
  command: mkdir -p ~/.kube

- name: create user kube directory
  when: inventory_hostname in groups['testkubemasternodes']
  command: mkdir -p ~/.kube

- name: Copy kube config to root home directory
  become: yes
  when: inventory_hostname in groups['testkubemasternodes']
  command: cp /etc/kubernetes/admin.conf /root/.kube/config

- name: Copy kube config to user home directory
  become: yes
  when: inventory_hostname in groups['testkubemasternodes']
  command: cp /etc/kubernetes/admin.conf /home/kube/.kube/config

- name: set owner of kube config
  become: yes
  when: inventory_hostname in groups['testkubemasternodes']
  command: chown kube /home/kube/.kube/config

- name: set group of kube config
  become: yes
  when: inventory_hostname in groups['testkubemasternodes']
  command: chgrp kube /home/kube/.kube/config

- name: copy kube config to ansible host
  become: yes
  when: inventory_hostname in groups['testkubemasternodes']
  copy: src=/etc/kubernetes/admin.conf dest=~/.kube/config mode=0777 remote_src=yes

- name: Install flannel
  when: inventory_hostname in groups['testkubemasternodes']
  command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

- name: Generate join command
  become: yes
  when: inventory_hostname in groups['testkubemasternodes']
  command: kubeadm token create --print-join-command
  register: join_command

- name: Copy join command to local file
  when: inventory_hostname in groups['testkubemasternodes']
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join_command"

- name: Copy the join command to server location
  when: inventory_hostname in groups['testkubeworkernodes']
  copy: src=join_command dest=/tmp/join_command.sh mode=0777

- name: Join worker nodes
  become: yes
  when: inventory_hostname in groups['testkubeworkernodes']
  command: sh /tmp/join_command.sh

- name: Wait for all k8s nodes to be ready
  when: inventory_hostname in groups['testkubemasternodes']
  shell: kubectl wait --for=condition=Ready nodes --all --timeout=600s

- name: Install metallb
  when: inventory_hostname in groups['testkubemasternodes']
  command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.10/config/manifests/metallb-native.yaml
